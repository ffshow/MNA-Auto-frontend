basePath: /
definitions:
  Account:
    properties:
      audit:
        items:
          $ref: '#/definitions/AccountAudit'
        type: array
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
        x-nullable: false
      employee_id:
        type: integer
        x-nullable: false
      id:
        type: integer
      name:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  AccountAudit:
    properties:
      accountModelID:
        type: integer
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      email:
        type: string
      employee_id:
        type: integer
        x-nullable: false
      name:
        type: string
    type: object
  AccountResponse:
    properties:
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
        x-nullable: false
      employee_id:
        type: integer
        x-nullable: false
      history:
        items:
          $ref: '#/definitions/AccountAudit'
        type: array
      id:
        type: integer
      name:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  City:
    properties:
      audit:
        items:
          $ref: '#/definitions/CityAudit'
        type: array
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      id:
        type: integer
      label:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  CityAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      cityModelID:
        type: integer
      garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      label:
        type: string
    type: object
  CityResponse:
    properties:
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      history:
        items:
          $ref: '#/definitions/CityAudit'
        type: array
      id:
        type: integer
      label:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  CreateAccount:
    properties:
      email:
        type: string
        x-nullable: false
      employee_id:
        type: integer
        x-nullable: false
      name:
        type: string
        x-nullable: false
    type: object
  CreateCity:
    properties:
      garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      label:
        type: string
        x-nullable: false
    type: object
  CreateEmployee:
    properties:
      account:
        allOf:
        - $ref: '#/definitions/Account'
        x-nullable: false
      assigned_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      created_tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
        x-nullable: false
      created_vehicle_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
      deleted_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
      name:
        type: string
        x-nullable: false
      permission:
        items:
          $ref: '#/definitions/Permission'
        type: array
        x-nullable: false
      requests:
        items:
          $ref: '#/definitions/SparePartRequest'
        type: array
        x-nullable: false
      updated_garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      updated_tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
        x-nullable: false
      updated_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
    type: object
  CreateGarage:
    properties:
      city:
        allOf:
        - $ref: '#/definitions/City'
        x-nullable: false
      city_id:
        type: integer
        x-nullable: false
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      label:
        type: string
        x-nullable: false
      owners:
        items:
          $ref: '#/definitions/Owner'
        type: array
        x-nullable: false
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
    type: object
  CreateOwner:
    properties:
      address:
        type: string
        x-nullable: false
      email:
        type: string
        x-nullable: false
      garage:
        allOf:
        - $ref: '#/definitions/Garage'
        x-nullable: false
      garage_id:
        type: integer
        x-nullable: false
      phone:
        type: string
        x-nullable: false
      photo:
        type: string
        x-nullable: false
      postal_code:
        type: string
        x-nullable: false
      vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
    type: object
  CreatePermission:
    properties:
      available:
        type: boolean
        x-nullable: false
      employees:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      employees_id:
        type: integer
        x-nullable: false
      label:
        type: string
        x-nullable: false
    type: object
  CreateSparePart:
    properties:
      barcode:
        type: string
        x-nullable: false
      reference:
        type: string
        x-nullable: false
      request:
        allOf:
        - $ref: '#/definitions/SparePartRequest'
        x-nullable: false
      request_id:
        type: integer
        x-nullable: false
      supplier:
        allOf:
        - $ref: '#/definitions/Supplier'
        x-nullable: false
      supplier_id:
        type: integer
        x-nullable: false
    type: object
  CreateSparePartRequest:
    properties:
      request_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      request_by_id:
        type: integer
        x-nullable: false
      spare_parts:
        items:
          $ref: '#/definitions/SparePart'
        type: array
        x-nullable: false
    type: object
  CreateSupplier:
    properties:
      name:
        type: string
        x-nullable: false
      spare_parts:
        items:
          $ref: '#/definitions/SparePart'
        type: array
        x-nullable: false
    type: object
  CreateTask:
    properties:
      attached_to:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      label:
        type: string
        x-nullable: false
      parentTaskID:
        type: integer
      subTasks:
        items:
          $ref: '#/definitions/Task'
        type: array
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
    type: object
  CreateVehicle:
    properties:
      chrono:
        type: string
        x-nullable: false
      collection_date:
        format: date-time
        type: string
        x-nullable: false
      commercial_name:
        type: string
        x-nullable: false
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      deleted_by_id:
        type: integer
        x-nullable: false
      delivery_date:
        format: date-time
        type: string
        x-nullable: false
      expertise:
        type: boolean
        x-nullable: false
      first_circulation:
        format: date-time
        type: string
        x-nullable: false
      mileage:
        type: integer
        x-nullable: false
      note:
        type: string
        x-nullable: false
      owner:
        allOf:
        - $ref: '#/definitions/Owner'
        x-nullable: false
      owner_id:
        type: integer
        x-nullable: false
      procedure_ve:
        type: boolean
        x-nullable: false
      registration:
        type: string
        x-nullable: false
      serial_number:
        type: string
        x-nullable: false
      sold_at:
        format: date-time
        type: string
        x-nullable: false
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
      vehicle_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
    type: object
  CreateVehicleTask:
    properties:
      assigned_to:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      assigned_to_id:
        type: integer
        x-nullable: false
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted:
        type: boolean
        x-nullable: false
      finished_at:
        format: date-time
        type: string
        x-nullable: false
      note:
        type: string
        x-nullable: false
      started_at:
        format: date-time
        type: string
        x-nullable: false
      task:
        allOf:
        - $ref: '#/definitions/Task'
        x-nullable: false
      task_id:
        type: integer
        x-nullable: false
      vehicle:
        allOf:
        - $ref: '#/definitions/Vehicle'
        x-nullable: false
      vehicle_id:
        type: integer
        x-nullable: false
    type: object
  Employee:
    properties:
      account:
        allOf:
        - $ref: '#/definitions/Account'
        x-nullable: false
      assigned_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      audit:
        items:
          $ref: '#/definitions/EmployeeAudit'
        type: array
      created_at:
        format: date-time
        type: string
      created_garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      created_tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
        x-nullable: false
      created_vehicle_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      deleted_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
      id:
        type: integer
      name:
        type: string
        x-nullable: false
      permission:
        items:
          $ref: '#/definitions/Permission'
        type: array
        x-nullable: false
      requests:
        items:
          $ref: '#/definitions/SparePartRequest'
        type: array
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      updated_garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      updated_tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
        x-nullable: false
      updated_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
    type: object
  EmployeeAudit:
    properties:
      account:
        allOf:
        - $ref: '#/definitions/Account'
        x-nullable: false
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      assigned_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      created_tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
        x-nullable: false
      created_vehicle_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
      deleted_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
      employeeModelID:
        type: integer
      name:
        type: string
      permission:
        items:
          $ref: '#/definitions/Permission'
        type: array
        x-nullable: false
      requests:
        items:
          $ref: '#/definitions/SparePartRequest'
        type: array
        x-nullable: false
      updated_garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      updated_tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
        x-nullable: false
      updated_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
    type: object
  EmployeeResponse:
    properties:
      account:
        allOf:
        - $ref: '#/definitions/Account'
        x-nullable: false
      assigned_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_at:
        format: date-time
        type: string
      created_garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      created_tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
        x-nullable: false
      created_vehicle_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      deleted_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
      history:
        items:
          $ref: '#/definitions/EmployeeAudit'
        type: array
      id:
        type: integer
      name:
        type: string
        x-nullable: false
      permission:
        items:
          $ref: '#/definitions/Permission'
        type: array
        x-nullable: false
      requests:
        items:
          $ref: '#/definitions/SparePartRequest'
        type: array
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      updated_garages:
        items:
          $ref: '#/definitions/Garage'
        type: array
        x-nullable: false
      updated_tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
        x-nullable: false
      updated_vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
    type: object
  Garage:
    properties:
      audit:
        items:
          $ref: '#/definitions/GarageAudit'
        type: array
      city:
        allOf:
        - $ref: '#/definitions/City'
        x-nullable: false
      city_id:
        type: integer
        x-nullable: false
      created_at:
        format: date-time
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      label:
        type: string
        x-nullable: false
      owners:
        items:
          $ref: '#/definitions/Owner'
        type: array
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
    type: object
  GarageAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      city:
        allOf:
        - $ref: '#/definitions/City'
        x-nullable: false
      city_id:
        type: integer
        x-nullable: false
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      garageModelID:
        type: integer
      label:
        type: string
      owners:
        items:
          $ref: '#/definitions/Owner'
        type: array
        x-nullable: false
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
    type: object
  GarageResponse:
    properties:
      city:
        allOf:
        - $ref: '#/definitions/City'
        x-nullable: false
      city_id:
        type: integer
        x-nullable: false
      created_at:
        format: date-time
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      history:
        items:
          $ref: '#/definitions/GarageAudit'
        type: array
      id:
        type: integer
      label:
        type: string
        x-nullable: false
      owners:
        items:
          $ref: '#/definitions/Owner'
        type: array
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
    type: object
  ListAccount:
    properties:
      data:
        items:
          $ref: '#/definitions/AccountResponse'
        type: array
      total:
        type: integer
    type: object
  ListCity:
    properties:
      data:
        items:
          $ref: '#/definitions/CityResponse'
        type: array
      total:
        type: integer
    type: object
  ListEmployee:
    properties:
      data:
        items:
          $ref: '#/definitions/EmployeeResponse'
        type: array
      total:
        type: integer
    type: object
  ListGarage:
    properties:
      data:
        items:
          $ref: '#/definitions/GarageResponse'
        type: array
      total:
        type: integer
    type: object
  ListOwner:
    properties:
      data:
        items:
          $ref: '#/definitions/OwnerResponse'
        type: array
      total:
        type: integer
    type: object
  ListPermission:
    properties:
      data:
        items:
          $ref: '#/definitions/PermissionResponse'
        type: array
      total:
        type: integer
    type: object
  ListSparePart:
    properties:
      data:
        items:
          $ref: '#/definitions/SparePartResponse'
        type: array
      total:
        type: integer
    type: object
  ListSparePartRequest:
    properties:
      data:
        items:
          $ref: '#/definitions/SparePartRequestResponse'
        type: array
      total:
        type: integer
    type: object
  ListSupplier:
    properties:
      data:
        items:
          $ref: '#/definitions/SupplierResponse'
        type: array
      total:
        type: integer
    type: object
  ListTask:
    properties:
      data:
        items:
          $ref: '#/definitions/TaskResponse'
        type: array
      total:
        type: integer
    type: object
  ListVehicle:
    properties:
      data:
        items:
          $ref: '#/definitions/VehicleResponse'
        type: array
      total:
        type: integer
    type: object
  ListVehicleTask:
    properties:
      data:
        items:
          $ref: '#/definitions/VehicleTaskResponse'
        type: array
      total:
        type: integer
    type: object
  Owner:
    properties:
      address:
        type: string
        x-nullable: false
      audit:
        items:
          $ref: '#/definitions/OwnerAudit'
        type: array
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
        x-nullable: false
      garage:
        allOf:
        - $ref: '#/definitions/Garage'
        x-nullable: false
      garage_id:
        type: integer
        x-nullable: false
      id:
        type: integer
      phone:
        type: string
        x-nullable: false
      photo:
        type: string
        x-nullable: false
      postal_code:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
    type: object
  OwnerAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      address:
        type: string
      email:
        type: string
      garage:
        allOf:
        - $ref: '#/definitions/Garage'
        x-nullable: false
      garage_id:
        type: integer
        x-nullable: false
      ownerModelID:
        type: integer
      phone:
        type: string
      photo:
        type: string
      postalCode:
        type: string
      vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
    type: object
  OwnerResponse:
    properties:
      address:
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
        x-nullable: false
      garage:
        allOf:
        - $ref: '#/definitions/Garage'
        x-nullable: false
      garage_id:
        type: integer
        x-nullable: false
      history:
        items:
          $ref: '#/definitions/OwnerAudit'
        type: array
      id:
        type: integer
      phone:
        type: string
        x-nullable: false
      photo:
        type: string
        x-nullable: false
      postal_code:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      vehicles:
        items:
          $ref: '#/definitions/Vehicle'
        type: array
        x-nullable: false
    type: object
  Permission:
    properties:
      audit:
        items:
          $ref: '#/definitions/PermissionAudit'
        type: array
      available:
        type: boolean
        x-nullable: false
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      employees:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      employees_id:
        type: integer
        x-nullable: false
      id:
        type: integer
      label:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  PermissionAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      available:
        type: boolean
      employees:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      employees_id:
        type: integer
        x-nullable: false
      label:
        type: string
      permissionModelID:
        type: integer
    type: object
  PermissionResponse:
    properties:
      available:
        type: boolean
        x-nullable: false
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      employees:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      employees_id:
        type: integer
        x-nullable: false
      history:
        items:
          $ref: '#/definitions/PermissionAudit'
        type: array
      id:
        type: integer
      label:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  ResponseError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  SparePart:
    properties:
      audit:
        items:
          $ref: '#/definitions/SparePartAudit'
        type: array
      barcode:
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      reference:
        type: string
        x-nullable: false
      request:
        allOf:
        - $ref: '#/definitions/SparePartRequest'
        x-nullable: false
      request_id:
        type: integer
        x-nullable: false
      supplier:
        allOf:
        - $ref: '#/definitions/Supplier'
        x-nullable: false
      supplier_id:
        type: integer
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  SparePartAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      barcode:
        type: string
      reference:
        type: string
      request:
        allOf:
        - $ref: '#/definitions/SparePartRequest'
        x-nullable: false
      request_id:
        type: integer
        x-nullable: false
      sparePartModelID:
        type: integer
      supplier:
        allOf:
        - $ref: '#/definitions/Supplier'
        x-nullable: false
      supplier_id:
        type: integer
        x-nullable: false
    type: object
  SparePartRequest:
    properties:
      audit:
        items:
          $ref: '#/definitions/SparePartRequestAudit'
        type: array
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      request_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      request_by_id:
        type: integer
        x-nullable: false
      spare_parts:
        items:
          $ref: '#/definitions/SparePart'
        type: array
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  SparePartRequestAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      request_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      request_by_id:
        type: integer
        x-nullable: false
      spare_parts:
        items:
          $ref: '#/definitions/SparePart'
        type: array
        x-nullable: false
      sparePartRequestModelID:
        type: integer
    type: object
  SparePartRequestResponse:
    properties:
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      history:
        items:
          $ref: '#/definitions/SparePartRequestAudit'
        type: array
      id:
        type: integer
      request_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      request_by_id:
        type: integer
        x-nullable: false
      spare_parts:
        items:
          $ref: '#/definitions/SparePart'
        type: array
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  SparePartResponse:
    properties:
      barcode:
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      history:
        items:
          $ref: '#/definitions/SparePartAudit'
        type: array
      id:
        type: integer
      reference:
        type: string
        x-nullable: false
      request:
        allOf:
        - $ref: '#/definitions/SparePartRequest'
        x-nullable: false
      request_id:
        type: integer
        x-nullable: false
      supplier:
        allOf:
        - $ref: '#/definitions/Supplier'
        x-nullable: false
      supplier_id:
        type: integer
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  Supplier:
    properties:
      audit:
        items:
          $ref: '#/definitions/SupplierAudit'
        type: array
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
        x-nullable: false
      spare_parts:
        items:
          $ref: '#/definitions/SparePart'
        type: array
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  SupplierAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      name:
        type: string
      spare_parts:
        items:
          $ref: '#/definitions/SparePart'
        type: array
        x-nullable: false
      supplierModelID:
        type: integer
    type: object
  SupplierResponse:
    properties:
      created_at:
        format: date-time
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      history:
        items:
          $ref: '#/definitions/SupplierAudit'
        type: array
      id:
        type: integer
      name:
        type: string
        x-nullable: false
      spare_parts:
        items:
          $ref: '#/definitions/SparePart'
        type: array
        x-nullable: false
      updated_at:
        format: date-time
        type: string
    type: object
  Task:
    properties:
      attached_to:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      audit:
        items:
          $ref: '#/definitions/TaskAudit'
        type: array
      created_at:
        format: date-time
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      label:
        type: string
        x-nullable: false
      parentTaskID:
        type: integer
      subTasks:
        items:
          $ref: '#/definitions/Task'
        type: array
      updated_at:
        format: date-time
        type: string
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
    type: object
  TaskAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      attached_to:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      label:
        type: string
      parentTaskID:
        type: integer
      subTasks:
        items:
          $ref: '#/definitions/Task'
        type: array
      taskModelID:
        type: integer
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
    type: object
  TaskResponse:
    properties:
      attached_to:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      created_at:
        format: date-time
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      history:
        items:
          $ref: '#/definitions/TaskAudit'
        type: array
      id:
        type: integer
      label:
        type: string
        x-nullable: false
      parent_task_id:
        type: integer
        x-nullable: false
      sub_tasks:
        items:
          $ref: '#/definitions/Task'
        type: array
      updated_at:
        format: date-time
        type: string
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
    type: object
  TotalCount:
    properties:
      count:
        type: integer
    type: object
  UpdateAccount:
    properties:
      email:
        type: string
        x-nullable: false
      name:
        type: string
        x-nullable: false
    type: object
  UpdateCity:
    properties:
      label:
        type: string
        x-nullable: false
    type: object
  UpdateEmployee:
    properties:
      name:
        type: string
        x-nullable: false
    type: object
  UpdateGarage:
    properties:
      label:
        type: string
        x-nullable: false
    type: object
  UpdateOwner:
    properties:
      address:
        type: string
        x-nullable: false
      email:
        type: string
        x-nullable: false
      phone:
        type: string
        x-nullable: false
      photo:
        type: string
        x-nullable: false
      postal_code:
        type: string
        x-nullable: false
    type: object
  UpdatePermission:
    properties:
      available:
        type: boolean
        x-nullable: false
      label:
        type: string
        x-nullable: false
    type: object
  UpdateSparePart:
    properties:
      barcode:
        type: string
        x-nullable: false
      reference:
        type: string
        x-nullable: false
    type: object
  UpdateSparePartRequest:
    type: object
  UpdateSupplier:
    properties:
      name:
        type: string
        x-nullable: false
    type: object
  UpdateTask:
    properties:
      label:
        type: string
        x-nullable: false
    type: object
  UpdateVehicle:
    properties:
      chrono:
        type: string
        x-nullable: false
      collection_date:
        format: date-time
        type: string
        x-nullable: false
      commercial_name:
        type: string
        x-nullable: false
      delivery_date:
        format: date-time
        type: string
        x-nullable: false
      expertise:
        type: boolean
        x-nullable: false
      first_circulation:
        format: date-time
        type: string
        x-nullable: false
      mileage:
        type: integer
        x-nullable: false
      note:
        type: string
        x-nullable: false
      procedure_ve:
        type: boolean
        x-nullable: false
      registration:
        type: string
        x-nullable: false
      serial_number:
        type: string
        x-nullable: false
      sold_at:
        format: date-time
        type: string
        x-nullable: false
    type: object
  UpdateVehicleTask:
    properties:
      deleted:
        type: boolean
        x-nullable: false
      finished_at:
        format: date-time
        type: string
        x-nullable: false
      note:
        type: string
        x-nullable: false
      started_at:
        format: date-time
        type: string
        x-nullable: false
    type: object
  Vehicle:
    properties:
      audit:
        items:
          $ref: '#/definitions/VehicleAudit'
        type: array
      chrono:
        type: string
        x-nullable: false
      collection_date:
        format: date-time
        type: string
        x-nullable: false
      commercial_name:
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      deleted_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      deleted_by_id:
        type: integer
        x-nullable: false
      delivery_date:
        format: date-time
        type: string
        x-nullable: false
      expertise:
        type: boolean
        x-nullable: false
      first_circulation:
        format: date-time
        type: string
        x-nullable: false
      id:
        type: integer
      mileage:
        type: integer
        x-nullable: false
      note:
        type: string
        x-nullable: false
      owner:
        allOf:
        - $ref: '#/definitions/Owner'
        x-nullable: false
      owner_id:
        type: integer
        x-nullable: false
      procedure_ve:
        type: boolean
        x-nullable: false
      registration:
        type: string
        x-nullable: false
      serial_number:
        type: string
        x-nullable: false
      sold_at:
        format: date-time
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
      vehicle_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
    type: object
  VehicleAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      chrono:
        type: string
      collectionDate:
        type: string
      commercialName:
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      deleted_by_id:
        type: integer
        x-nullable: false
      deliveryDate:
        type: string
      expertise:
        type: boolean
      firstCirculation:
        type: string
      mileage:
        type: integer
      note:
        type: string
      owner:
        allOf:
        - $ref: '#/definitions/Owner'
        x-nullable: false
      owner_id:
        type: integer
        x-nullable: false
      procedureVe:
        type: boolean
      registration:
        type: string
      serialNumber:
        type: string
      soldAt:
        type: string
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
      vehicle_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
      vehicleModelID:
        type: integer
    type: object
  VehicleResponse:
    properties:
      chrono:
        type: string
        x-nullable: false
      collection_date:
        format: date-time
        type: string
        x-nullable: false
      commercial_name:
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      deleted_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      deleted_by_id:
        type: integer
        x-nullable: false
      delivery_date:
        format: date-time
        type: string
        x-nullable: false
      expertise:
        type: boolean
        x-nullable: false
      first_circulation:
        format: date-time
        type: string
        x-nullable: false
      history:
        items:
          $ref: '#/definitions/VehicleAudit'
        type: array
      id:
        type: integer
      mileage:
        type: integer
        x-nullable: false
      note:
        type: string
        x-nullable: false
      owner:
        allOf:
        - $ref: '#/definitions/Owner'
        x-nullable: false
      owner_id:
        type: integer
        x-nullable: false
      procedure_ve:
        type: boolean
        x-nullable: false
      registration:
        type: string
        x-nullable: false
      serial_number:
        type: string
        x-nullable: false
      sold_at:
        format: date-time
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      updated_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      updated_by_id:
        type: integer
        x-nullable: false
      vehicle_tasks:
        items:
          $ref: '#/definitions/VehicleTask'
        type: array
        x-nullable: false
    type: object
  VehicleTask:
    properties:
      assigned_to:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      assigned_to_id:
        type: integer
        x-nullable: false
      audit:
        items:
          $ref: '#/definitions/VehicleTaskAudit'
        type: array
      created_at:
        format: date-time
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted:
        type: boolean
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      finished_at:
        format: date-time
        type: string
        x-nullable: false
      id:
        type: integer
      note:
        type: string
        x-nullable: false
      started_at:
        format: date-time
        type: string
        x-nullable: false
      task:
        allOf:
        - $ref: '#/definitions/Task'
        x-nullable: false
      task_id:
        type: integer
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      vehicle:
        allOf:
        - $ref: '#/definitions/Vehicle'
        x-nullable: false
      vehicle_id:
        type: integer
        x-nullable: false
    type: object
  VehicleTaskAudit:
    properties:
      action:
        description: INSERT, UPDATE, DELETE
        type: string
      actionAt:
        type: string
      actionID:
        type: integer
      assigned_to:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      assigned_to_id:
        type: integer
        x-nullable: false
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted:
        type: boolean
      finishedAt:
        type: string
      note:
        type: string
      startedAt:
        type: string
      task:
        allOf:
        - $ref: '#/definitions/Task'
        x-nullable: false
      task_id:
        type: integer
        x-nullable: false
      vehicle:
        allOf:
        - $ref: '#/definitions/Vehicle'
        x-nullable: false
      vehicle_id:
        type: integer
        x-nullable: false
      vehicleTaskModelID:
        type: integer
    type: object
  VehicleTaskResponse:
    properties:
      assigned_to:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      assigned_to_id:
        type: integer
        x-nullable: false
      created_at:
        format: date-time
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/Employee'
        x-nullable: false
      created_by_id:
        type: integer
        x-nullable: false
      deleted:
        type: boolean
        x-nullable: false
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      finished_at:
        format: date-time
        type: string
        x-nullable: false
      history:
        items:
          $ref: '#/definitions/VehicleTaskAudit'
        type: array
      id:
        type: integer
      note:
        type: string
        x-nullable: false
      started_at:
        format: date-time
        type: string
        x-nullable: false
      task:
        allOf:
        - $ref: '#/definitions/Task'
        x-nullable: false
      task_id:
        type: integer
        x-nullable: false
      updated_at:
        format: date-time
        type: string
      vehicle:
        allOf:
        - $ref: '#/definitions/Vehicle'
        x-nullable: false
      vehicle_id:
        type: integer
        x-nullable: false
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
host: localhost:3000
info:
  contact:
    email: support@mna-auto.io
    name: API Support
    url: http://www.mna-auto.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://mna-auto.io/terms/
  title: MNA-Automobile Swagger API
  version: "1.0"
paths:
  /api/account:
    post:
      consumes:
      - application/json
      description: Register account
      parameters:
      - description: Register account
        in: body
        name: account_model
        required: true
        schema:
          $ref: '#/definitions/CreateAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AccountResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new account
      tags:
      - account
  /api/account/{id}:
    get:
      consumes:
      - application/json
      description: Get account by ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with employee data
        in: query
        name: with_employee
        type: boolean
      - description: with employee history data
        in: query
        name: with_history_employee
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AccountResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get account by ID
      tags:
      - account
    patch:
      consumes:
      - application/json
      description: Edit account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register account
        in: body
        name: account_model
        required: true
        schema:
          $ref: '#/definitions/UpdateAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AccountResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a account
      tags:
      - account
  /api/account/import:
    post:
      consumes:
      - application/json
      description: Register account (useful for importing data)
      parameters:
      - description: Register account
        in: body
        name: account_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateAccount'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/AccountResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many account
      tags:
      - account
  /api/account/list:
    get:
      consumes:
      - application/json
      description: List account
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with employee data
        in: query
        name: with_employee
        type: boolean
      - description: with employee history data
        in: query
        name: with_history_employee
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListAccount'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List account
      tags:
      - account
  /api/account/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - account
  /api/city:
    post:
      consumes:
      - application/json
      description: Register city
      parameters:
      - description: Register city
        in: body
        name: city_model
        required: true
        schema:
          $ref: '#/definitions/CreateCity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CityResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new city
      tags:
      - city
  /api/city/{id}:
    get:
      consumes:
      - application/json
      description: Get city by ID
      parameters:
      - description: City ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with garages data
        in: query
        name: with_garages
        type: boolean
      - description: with garages owners nested data
        in: query
        name: with_garages_owners
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CityResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get city by ID
      tags:
      - city
    patch:
      consumes:
      - application/json
      description: Edit city
      parameters:
      - description: City ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register city
        in: body
        name: city_model
        required: true
        schema:
          $ref: '#/definitions/UpdateCity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CityResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a city
      tags:
      - city
  /api/city/import:
    post:
      consumes:
      - application/json
      description: Register city (useful for importing data)
      parameters:
      - description: Register city
        in: body
        name: city_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateCity'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/CityResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many city
      tags:
      - city
  /api/city/list:
    get:
      consumes:
      - application/json
      description: List city
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with garages data
        in: query
        name: with_garages
        type: boolean
      - description: with garages owners data
        in: query
        name: with_garages_owners
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListCity'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List city
      tags:
      - city
  /api/city/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - city
  /api/employee:
    post:
      consumes:
      - application/json
      description: Register employee
      parameters:
      - description: Register employee
        in: body
        name: employee_model
        required: true
        schema:
          $ref: '#/definitions/CreateEmployee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new employee
      tags:
      - employee
  /api/employee/{id}:
    get:
      consumes:
      - application/json
      description: Get employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with created_vehicles data
        in: query
        name: with_created_vehicles
        type: boolean
      - description: with created_vehicles vehicle_tasks nested data
        in: query
        name: with_created_vehicles_vehicle_tasks
        type: boolean
      - description: with updated_vehicles data
        in: query
        name: with_updated_vehicles
        type: boolean
      - description: with updated_vehicles vehicle_tasks nested data
        in: query
        name: with_updated_vehicles_vehicle_tasks
        type: boolean
      - description: with deleted_vehicles data
        in: query
        name: with_deleted_vehicles
        type: boolean
      - description: with deleted_vehicles vehicle_tasks nested data
        in: query
        name: with_deleted_vehicles_vehicle_tasks
        type: boolean
      - description: with created_garages data
        in: query
        name: with_created_garages
        type: boolean
      - description: with created_garages owners nested data
        in: query
        name: with_created_garages_owners
        type: boolean
      - description: with updated_garages data
        in: query
        name: with_updated_garages
        type: boolean
      - description: with updated_garages owners nested data
        in: query
        name: with_updated_garages_owners
        type: boolean
      - description: with created_tasks data
        in: query
        name: with_created_tasks
        type: boolean
      - description: with created_tasks sub_tasks nested data
        in: query
        name: with_created_tasks_sub_tasks
        type: boolean
      - description: with created_tasks attached_to nested data
        in: query
        name: with_created_tasks_attached_to
        type: boolean
      - description: with updated_tasks data
        in: query
        name: with_updated_tasks
        type: boolean
      - description: with updated_tasks sub_tasks nested data
        in: query
        name: with_updated_tasks_sub_tasks
        type: boolean
      - description: with updated_tasks attached_to nested data
        in: query
        name: with_updated_tasks_attached_to
        type: boolean
      - description: with created_vehicle_tasks data
        in: query
        name: with_created_vehicle_tasks
        type: boolean
      - description: with assigned_tasks data
        in: query
        name: with_assigned_tasks
        type: boolean
      - description: with permission data
        in: query
        name: with_permission
        type: boolean
      - description: with requests data
        in: query
        name: with_requests
        type: boolean
      - description: with requests spare_parts nested data
        in: query
        name: with_requests_spare_parts
        type: boolean
      - description: with account data
        in: query
        name: with_account
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get employee by ID
      tags:
      - employee
    patch:
      consumes:
      - application/json
      description: Edit employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register employee
        in: body
        name: employee_model
        required: true
        schema:
          $ref: '#/definitions/UpdateEmployee'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a employee
      tags:
      - employee
  /api/employee/import:
    post:
      consumes:
      - application/json
      description: Register employee (useful for importing data)
      parameters:
      - description: Register employee
        in: body
        name: employee_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateEmployee'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/EmployeeResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many employee
      tags:
      - employee
  /api/employee/list:
    get:
      consumes:
      - application/json
      description: List employee
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with created_vehicles data
        in: query
        name: with_created_vehicles
        type: boolean
      - description: with created_vehicles vehicle_tasks data
        in: query
        name: with_created_vehicles_vehicle_tasks
        type: boolean
      - description: with updated_vehicles data
        in: query
        name: with_updated_vehicles
        type: boolean
      - description: with updated_vehicles vehicle_tasks data
        in: query
        name: with_updated_vehicles_vehicle_tasks
        type: boolean
      - description: with deleted_vehicles data
        in: query
        name: with_deleted_vehicles
        type: boolean
      - description: with deleted_vehicles vehicle_tasks data
        in: query
        name: with_deleted_vehicles_vehicle_tasks
        type: boolean
      - description: with created_garages data
        in: query
        name: with_created_garages
        type: boolean
      - description: with created_garages owners data
        in: query
        name: with_created_garages_owners
        type: boolean
      - description: with updated_garages data
        in: query
        name: with_updated_garages
        type: boolean
      - description: with updated_garages owners data
        in: query
        name: with_updated_garages_owners
        type: boolean
      - description: with created_tasks data
        in: query
        name: with_created_tasks
        type: boolean
      - description: with created_tasks sub_tasks data
        in: query
        name: with_created_tasks_sub_tasks
        type: boolean
      - description: with created_tasks attached_to data
        in: query
        name: with_created_tasks_attached_to
        type: boolean
      - description: with updated_tasks data
        in: query
        name: with_updated_tasks
        type: boolean
      - description: with updated_tasks sub_tasks data
        in: query
        name: with_updated_tasks_sub_tasks
        type: boolean
      - description: with updated_tasks attached_to data
        in: query
        name: with_updated_tasks_attached_to
        type: boolean
      - description: with created_vehicle_tasks data
        in: query
        name: with_created_vehicle_tasks
        type: boolean
      - description: with assigned_tasks data
        in: query
        name: with_assigned_tasks
        type: boolean
      - description: with permission data
        in: query
        name: with_permission
        type: boolean
      - description: with requests data
        in: query
        name: with_requests
        type: boolean
      - description: with requests spare_parts data
        in: query
        name: with_requests_spare_parts
        type: boolean
      - description: with account data
        in: query
        name: with_account
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListEmployee'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List employee
      tags:
      - employee
  /api/employee/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - employee
  /api/garage:
    post:
      consumes:
      - application/json
      description: Register garage
      parameters:
      - description: Register garage
        in: body
        name: garage_model
        required: true
        schema:
          $ref: '#/definitions/CreateGarage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GarageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new garage
      tags:
      - garage
  /api/garage/{id}:
    get:
      consumes:
      - application/json
      description: Get garage by ID
      parameters:
      - description: Garage ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with owners data
        in: query
        name: with_owners
        type: boolean
      - description: with owners vehicles nested data
        in: query
        name: with_owners_vehicles
        type: boolean
      - description: with city data
        in: query
        name: with_city
        type: boolean
      - description: with city history data
        in: query
        name: with_history_city
        type: boolean
      - description: with created_by data
        in: query
        name: with_created_by
        type: boolean
      - description: with created_by history data
        in: query
        name: with_history_created_by
        type: boolean
      - description: with updated_by data
        in: query
        name: with_updated_by
        type: boolean
      - description: with updated_by history data
        in: query
        name: with_history_updated_by
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GarageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get garage by ID
      tags:
      - garage
    patch:
      consumes:
      - application/json
      description: Edit garage
      parameters:
      - description: Garage ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register garage
        in: body
        name: garage_model
        required: true
        schema:
          $ref: '#/definitions/UpdateGarage'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GarageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a garage
      tags:
      - garage
  /api/garage/import:
    post:
      consumes:
      - application/json
      description: Register garage (useful for importing data)
      parameters:
      - description: Register garage
        in: body
        name: garage_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateGarage'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/GarageResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many garage
      tags:
      - garage
  /api/garage/list:
    get:
      consumes:
      - application/json
      description: List garage
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with owners data
        in: query
        name: with_owners
        type: boolean
      - description: with owners vehicles data
        in: query
        name: with_owners_vehicles
        type: boolean
      - description: with city data
        in: query
        name: with_city
        type: boolean
      - description: with city history data
        in: query
        name: with_history_city
        type: boolean
      - description: with created_by data
        in: query
        name: with_created_by
        type: boolean
      - description: with created_by history data
        in: query
        name: with_history_created_by
        type: boolean
      - description: with updated_by data
        in: query
        name: with_updated_by
        type: boolean
      - description: with updated_by history data
        in: query
        name: with_history_updated_by
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListGarage'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List garage
      tags:
      - garage
  /api/garage/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - garage
  /api/owner:
    post:
      consumes:
      - application/json
      description: Register owner
      parameters:
      - description: Register owner
        in: body
        name: owner_model
        required: true
        schema:
          $ref: '#/definitions/CreateOwner'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/OwnerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new owner
      tags:
      - owner
  /api/owner/{id}:
    get:
      consumes:
      - application/json
      description: Get owner by ID
      parameters:
      - description: Owner ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with vehicles data
        in: query
        name: with_vehicles
        type: boolean
      - description: with vehicles vehicle_tasks nested data
        in: query
        name: with_vehicles_vehicle_tasks
        type: boolean
      - description: with garage data
        in: query
        name: with_garage
        type: boolean
      - description: with garage history data
        in: query
        name: with_history_garage
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/OwnerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get owner by ID
      tags:
      - owner
    patch:
      consumes:
      - application/json
      description: Edit owner
      parameters:
      - description: Owner ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register owner
        in: body
        name: owner_model
        required: true
        schema:
          $ref: '#/definitions/UpdateOwner'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/OwnerResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a owner
      tags:
      - owner
  /api/owner/import:
    post:
      consumes:
      - application/json
      description: Register owner (useful for importing data)
      parameters:
      - description: Register owner
        in: body
        name: owner_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateOwner'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/OwnerResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many owner
      tags:
      - owner
  /api/owner/list:
    get:
      consumes:
      - application/json
      description: List owner
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with vehicles data
        in: query
        name: with_vehicles
        type: boolean
      - description: with vehicles vehicle_tasks data
        in: query
        name: with_vehicles_vehicle_tasks
        type: boolean
      - description: with garage data
        in: query
        name: with_garage
        type: boolean
      - description: with garage history data
        in: query
        name: with_history_garage
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListOwner'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List owner
      tags:
      - owner
  /api/owner/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - owner
  /api/permission:
    post:
      consumes:
      - application/json
      description: Register permission
      parameters:
      - description: Register permission
        in: body
        name: permission_model
        required: true
        schema:
          $ref: '#/definitions/CreatePermission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PermissionResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new permission
      tags:
      - permission
  /api/permission/{id}:
    get:
      consumes:
      - application/json
      description: Get permission by ID
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with employees data
        in: query
        name: with_employees
        type: boolean
      - description: with employees history data
        in: query
        name: with_history_employees
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PermissionResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get permission by ID
      tags:
      - permission
    patch:
      consumes:
      - application/json
      description: Edit permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register permission
        in: body
        name: permission_model
        required: true
        schema:
          $ref: '#/definitions/UpdatePermission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PermissionResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a permission
      tags:
      - permission
  /api/permission/import:
    post:
      consumes:
      - application/json
      description: Register permission (useful for importing data)
      parameters:
      - description: Register permission
        in: body
        name: permission_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreatePermission'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/PermissionResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many permission
      tags:
      - permission
  /api/permission/list:
    get:
      consumes:
      - application/json
      description: List permission
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with employees data
        in: query
        name: with_employees
        type: boolean
      - description: with employees history data
        in: query
        name: with_history_employees
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListPermission'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List permission
      tags:
      - permission
  /api/permission/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - permission
  /api/spare_part:
    post:
      consumes:
      - application/json
      description: Register spare_part
      parameters:
      - description: Register spare_part
        in: body
        name: spare_part_model
        required: true
        schema:
          $ref: '#/definitions/CreateSparePart'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SparePartResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new spare_part
      tags:
      - spare_part
  /api/spare_part/{id}:
    get:
      consumes:
      - application/json
      description: Get spare_part by ID
      parameters:
      - description: SparePart ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with request data
        in: query
        name: with_request
        type: boolean
      - description: with request history data
        in: query
        name: with_history_request
        type: boolean
      - description: with supplier data
        in: query
        name: with_supplier
        type: boolean
      - description: with supplier history data
        in: query
        name: with_history_supplier
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SparePartResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get spare_part by ID
      tags:
      - spare_part
    patch:
      consumes:
      - application/json
      description: Edit spare_part
      parameters:
      - description: SparePart ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register spare_part
        in: body
        name: spare_part_model
        required: true
        schema:
          $ref: '#/definitions/UpdateSparePart'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SparePartResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a spare_part
      tags:
      - spare_part
  /api/spare_part/import:
    post:
      consumes:
      - application/json
      description: Register spare_part (useful for importing data)
      parameters:
      - description: Register spare_part
        in: body
        name: spare_part_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateSparePart'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/SparePartResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many spare_part
      tags:
      - spare_part
  /api/spare_part/list:
    get:
      consumes:
      - application/json
      description: List spare_part
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with request data
        in: query
        name: with_request
        type: boolean
      - description: with request history data
        in: query
        name: with_history_request
        type: boolean
      - description: with supplier data
        in: query
        name: with_supplier
        type: boolean
      - description: with supplier history data
        in: query
        name: with_history_supplier
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListSparePart'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List spare_part
      tags:
      - spare_part
  /api/spare_part/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - spare_part
  /api/spare_part_request:
    post:
      consumes:
      - application/json
      description: Register spare_part_request
      parameters:
      - description: Register spare_part_request
        in: body
        name: spare_part_request_model
        required: true
        schema:
          $ref: '#/definitions/CreateSparePartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SparePartRequestResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new spare_part_request
      tags:
      - spare_part_request
  /api/spare_part_request/{id}:
    get:
      consumes:
      - application/json
      description: Get spare_part_request by ID
      parameters:
      - description: SparePartRequest ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with spare_parts data
        in: query
        name: with_spare_parts
        type: boolean
      - description: with request_by data
        in: query
        name: with_request_by
        type: boolean
      - description: with request_by history data
        in: query
        name: with_history_request_by
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SparePartRequestResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get spare_part_request by ID
      tags:
      - spare_part_request
    patch:
      consumes:
      - application/json
      description: Edit spare_part_request
      parameters:
      - description: SparePartRequest ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register spare_part_request
        in: body
        name: spare_part_request_model
        required: true
        schema:
          $ref: '#/definitions/UpdateSparePartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SparePartRequestResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a spare_part_request
      tags:
      - spare_part_request
  /api/spare_part_request/import:
    post:
      consumes:
      - application/json
      description: Register spare_part_request (useful for importing data)
      parameters:
      - description: Register spare_part_request
        in: body
        name: spare_part_request_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateSparePartRequest'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/SparePartRequestResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many spare_part_request
      tags:
      - spare_part_request
  /api/spare_part_request/list:
    get:
      consumes:
      - application/json
      description: List spare_part_request
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with spare_parts data
        in: query
        name: with_spare_parts
        type: boolean
      - description: with request_by data
        in: query
        name: with_request_by
        type: boolean
      - description: with request_by history data
        in: query
        name: with_history_request_by
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListSparePartRequest'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List spare_part_request
      tags:
      - spare_part_request
  /api/spare_part_request/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - spare_part_request
  /api/supplier:
    post:
      consumes:
      - application/json
      description: Register supplier
      parameters:
      - description: Register supplier
        in: body
        name: supplier_model
        required: true
        schema:
          $ref: '#/definitions/CreateSupplier'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SupplierResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new supplier
      tags:
      - supplier
  /api/supplier/{id}:
    get:
      consumes:
      - application/json
      description: Get supplier by ID
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with spare_parts data
        in: query
        name: with_spare_parts
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SupplierResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get supplier by ID
      tags:
      - supplier
    patch:
      consumes:
      - application/json
      description: Edit supplier
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register supplier
        in: body
        name: supplier_model
        required: true
        schema:
          $ref: '#/definitions/UpdateSupplier'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SupplierResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a supplier
      tags:
      - supplier
  /api/supplier/import:
    post:
      consumes:
      - application/json
      description: Register supplier (useful for importing data)
      parameters:
      - description: Register supplier
        in: body
        name: supplier_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateSupplier'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/SupplierResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many supplier
      tags:
      - supplier
  /api/supplier/list:
    get:
      consumes:
      - application/json
      description: List supplier
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with spare_parts data
        in: query
        name: with_spare_parts
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListSupplier'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List supplier
      tags:
      - supplier
  /api/supplier/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - supplier
  /api/task:
    post:
      consumes:
      - application/json
      description: Register task
      parameters:
      - description: Register task
        in: body
        name: task_model
        required: true
        schema:
          $ref: '#/definitions/CreateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TaskResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new task
      tags:
      - task
  /api/task/{id}:
    get:
      consumes:
      - application/json
      description: Get task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with sub_tasks data
        in: query
        name: with_sub_tasks
        type: boolean
      - description: with sub_tasks sub_tasks nested data
        in: query
        name: with_sub_tasks_sub_tasks
        type: boolean
      - description: with sub_tasks attached_to nested data
        in: query
        name: with_sub_tasks_attached_to
        type: boolean
      - description: with attached_to data
        in: query
        name: with_attached_to
        type: boolean
      - description: with created_by data
        in: query
        name: with_created_by
        type: boolean
      - description: with created_by history data
        in: query
        name: with_history_created_by
        type: boolean
      - description: with updated_by data
        in: query
        name: with_updated_by
        type: boolean
      - description: with updated_by history data
        in: query
        name: with_history_updated_by
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TaskResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get task by ID
      tags:
      - task
    patch:
      consumes:
      - application/json
      description: Edit task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register task
        in: body
        name: task_model
        required: true
        schema:
          $ref: '#/definitions/UpdateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TaskResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a task
      tags:
      - task
  /api/task/import:
    post:
      consumes:
      - application/json
      description: Register task (useful for importing data)
      parameters:
      - description: Register task
        in: body
        name: task_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateTask'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/TaskResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many task
      tags:
      - task
  /api/task/list:
    get:
      consumes:
      - application/json
      description: List task
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with sub_tasks data
        in: query
        name: with_sub_tasks
        type: boolean
      - description: with sub_tasks sub_tasks data
        in: query
        name: with_sub_tasks_sub_tasks
        type: boolean
      - description: with sub_tasks attached_to data
        in: query
        name: with_sub_tasks_attached_to
        type: boolean
      - description: with attached_to data
        in: query
        name: with_attached_to
        type: boolean
      - description: with created_by data
        in: query
        name: with_created_by
        type: boolean
      - description: with created_by history data
        in: query
        name: with_history_created_by
        type: boolean
      - description: with updated_by data
        in: query
        name: with_updated_by
        type: boolean
      - description: with updated_by history data
        in: query
        name: with_history_updated_by
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListTask'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List task
      tags:
      - task
  /api/task/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - task
  /api/vehicle:
    post:
      consumes:
      - application/json
      description: Register vehicle
      parameters:
      - description: Register vehicle
        in: body
        name: vehicle_model
        required: true
        schema:
          $ref: '#/definitions/CreateVehicle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/VehicleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new vehicle
      tags:
      - vehicle
  /api/vehicle/{id}:
    get:
      consumes:
      - application/json
      description: Get vehicle by ID
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with vehicle_tasks data
        in: query
        name: with_vehicle_tasks
        type: boolean
      - description: with created_by data
        in: query
        name: with_created_by
        type: boolean
      - description: with created_by history data
        in: query
        name: with_history_created_by
        type: boolean
      - description: with updated_by data
        in: query
        name: with_updated_by
        type: boolean
      - description: with updated_by history data
        in: query
        name: with_history_updated_by
        type: boolean
      - description: with deleted_by data
        in: query
        name: with_deleted_by
        type: boolean
      - description: with deleted_by history data
        in: query
        name: with_history_deleted_by
        type: boolean
      - description: with owner data
        in: query
        name: with_owner
        type: boolean
      - description: with owner history data
        in: query
        name: with_history_owner
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/VehicleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get vehicle by ID
      tags:
      - vehicle
    patch:
      consumes:
      - application/json
      description: Edit vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register vehicle
        in: body
        name: vehicle_model
        required: true
        schema:
          $ref: '#/definitions/UpdateVehicle'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/VehicleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a vehicle
      tags:
      - vehicle
  /api/vehicle/import:
    post:
      consumes:
      - application/json
      description: Register vehicle (useful for importing data)
      parameters:
      - description: Register vehicle
        in: body
        name: vehicle_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateVehicle'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/VehicleResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many vehicle
      tags:
      - vehicle
  /api/vehicle/list:
    get:
      consumes:
      - application/json
      description: List vehicle
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with vehicle_tasks data
        in: query
        name: with_vehicle_tasks
        type: boolean
      - description: with created_by data
        in: query
        name: with_created_by
        type: boolean
      - description: with created_by history data
        in: query
        name: with_history_created_by
        type: boolean
      - description: with updated_by data
        in: query
        name: with_updated_by
        type: boolean
      - description: with updated_by history data
        in: query
        name: with_history_updated_by
        type: boolean
      - description: with deleted_by data
        in: query
        name: with_deleted_by
        type: boolean
      - description: with deleted_by history data
        in: query
        name: with_history_deleted_by
        type: boolean
      - description: with owner data
        in: query
        name: with_owner
        type: boolean
      - description: with owner history data
        in: query
        name: with_history_owner
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListVehicle'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List vehicle
      tags:
      - vehicle
  /api/vehicle/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - vehicle
  /api/vehicle_task:
    post:
      consumes:
      - application/json
      description: Register vehicle_task
      parameters:
      - description: Register vehicle_task
        in: body
        name: vehicle_task_model
        required: true
        schema:
          $ref: '#/definitions/CreateVehicleTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/VehicleTaskResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create a new vehicle_task
      tags:
      - vehicle_task
  /api/vehicle_task/{id}:
    get:
      consumes:
      - application/json
      description: Get vehicle_task by ID
      parameters:
      - description: VehicleTask ID
        in: path
        name: id
        required: true
        type: integer
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with vehicle data
        in: query
        name: with_vehicle
        type: boolean
      - description: with vehicle history data
        in: query
        name: with_history_vehicle
        type: boolean
      - description: with created_by data
        in: query
        name: with_created_by
        type: boolean
      - description: with created_by history data
        in: query
        name: with_history_created_by
        type: boolean
      - description: with assigned_to data
        in: query
        name: with_assigned_to
        type: boolean
      - description: with assigned_to history data
        in: query
        name: with_history_assigned_to
        type: boolean
      - description: with task data
        in: query
        name: with_task
        type: boolean
      - description: with task history data
        in: query
        name: with_history_task
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/VehicleTaskResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Get vehicle_task by ID
      tags:
      - vehicle_task
    patch:
      consumes:
      - application/json
      description: Edit vehicle_task
      parameters:
      - description: VehicleTask ID
        in: path
        name: id
        required: true
        type: integer
      - description: Register vehicle_task
        in: body
        name: vehicle_task_model
        required: true
        schema:
          $ref: '#/definitions/UpdateVehicleTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/VehicleTaskResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Update a vehicle_task
      tags:
      - vehicle_task
  /api/vehicle_task/import:
    post:
      consumes:
      - application/json
      description: Register vehicle_task (useful for importing data)
      parameters:
      - description: Register vehicle_task
        in: body
        name: vehicle_task_model
        required: true
        schema:
          items:
            $ref: '#/definitions/CreateVehicleTask'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/VehicleTaskResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Create many vehicle_task
      tags:
      - vehicle_task
  /api/vehicle_task/list:
    get:
      consumes:
      - application/json
      description: List vehicle_task
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with history data
        in: query
        name: with_history
        type: boolean
      - description: with vehicle data
        in: query
        name: with_vehicle
        type: boolean
      - description: with vehicle history data
        in: query
        name: with_history_vehicle
        type: boolean
      - description: with created_by data
        in: query
        name: with_created_by
        type: boolean
      - description: with created_by history data
        in: query
        name: with_history_created_by
        type: boolean
      - description: with assigned_to data
        in: query
        name: with_assigned_to
        type: boolean
      - description: with assigned_to history data
        in: query
        name: with_history_assigned_to
        type: boolean
      - description: with task data
        in: query
        name: with_task
        type: boolean
      - description: with task history data
        in: query
        name: with_history_task
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListVehicleTask'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/ResponseError'
      summary: List vehicle_task
      tags:
      - vehicle_task
  /api/vehicle_task/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/ResponseError'
      summary: Total records
      tags:
      - vehicle_task
  /api/vehicles_seed:
    post:
      consumes:
      - '*/*'
      description: Seed vehicles.
      parameters:
      - description: count
        in: query
        name: count
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Seed vehicles
      tags:
      - vehicle
  /health:
    get:
      description: get the status of server.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Show the status of server.
      tags:
      - root
schemes:
- http
swagger: "2.0"
