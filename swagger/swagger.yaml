basePath: /
definitions:
  models.AccountModelResponse:
    properties:
      created_at:
        format: date-time
        type: string
        x-date: true
      email:
        type: string
        x-nullable: false
      id:
        type: string
      name:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-date: true
    type: object
  models.CreateAccountModel:
    properties:
      email:
        type: string
        x-nullable: false
      name:
        type: string
        x-nullable: false
    type: object
  models.CreateEmployeeModel:
    properties:
      name:
        type: string
        x-nullable: false
    type: object
  models.CreateGarageModel:
    properties:
      label:
        type: string
        x-nullable: false
    type: object
  models.CreateOwnerModel:
    properties:
      address:
        type: string
        x-nullable: false
      email:
        type: string
        x-nullable: false
      phone:
        type: string
        x-nullable: false
      photo:
        type: string
        x-nullable: false
      postal_code:
        type: string
        x-nullable: false
    type: object
  models.CreatePermissionModel:
    properties:
      available:
        type: boolean
        x-nullable: false
      label:
        type: string
        x-nullable: false
    type: object
  models.CreateSparePartModel:
    properties:
      barcode:
        type: string
        x-nullable: false
      reference:
        type: string
        x-nullable: false
    type: object
  models.CreateSupplierModel:
    properties:
      name:
        type: string
        x-nullable: false
    type: object
  models.CreateTaskModel:
    properties:
      label:
        type: string
        x-nullable: false
      parent_id:
        type: string
        x-nullable: false
      sub_tasks:
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  models.CreateVehicleModel:
    properties:
      chrono:
        type: string
        x-nullable: false
      collection_date:
        format: date-time
        type: string
        x-nullable: false
      commercial_name:
        type: string
        x-nullable: false
      created_by:
        type: string
        x-nullable: false
      delivery_date:
        format: date-time
        type: string
        x-nullable: false
      expertise:
        type: boolean
        x-nullable: false
      first_circulation:
        format: date-time
        type: string
        x-nullable: false
      mileage:
        type: integer
        x-nullable: false
      note:
        type: string
        x-nullable: false
      owner:
        type: string
        x-nullable: false
      procedure_ve:
        type: boolean
        x-nullable: false
      registration:
        type: string
        x-nullable: false
      serial_number:
        type: string
        x-nullable: false
      sold_at:
        format: date-time
        type: string
        x-nullable: false
      vehicle_task:
        items:
          type: string
        type: array
        x-nullable: false
    type: object
  models.CreateVehicleTaskModel:
    properties:
      deleted:
        type: boolean
        x-nullable: false
      employee:
        type: string
        x-nullable: false
      finished_at:
        format: date-time
        type: string
        x-nullable: false
      started_at:
        format: date-time
        type: string
        x-nullable: false
      task:
        type: string
        x-nullable: false
      vehicle:
        type: string
        x-nullable: false
    type: object
  models.EmployeeModelResponse:
    properties:
      created_at:
        format: date-time
        type: string
        x-date: true
      id:
        type: string
      name:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-date: true
    type: object
  models.GarageModelResponse:
    properties:
      created_at:
        format: date-time
        type: string
        x-date: true
      id:
        type: string
      label:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-date: true
    type: object
  models.ListAccountModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.AccountModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.ListEmployeeModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.EmployeeModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.ListGarageModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.GarageModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.ListOwnerModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.OwnerModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.ListPermissionModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.PermissionModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.ListSparePartModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.SparePartModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.ListSupplierModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.SupplierModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.ListTaskModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.TaskModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.ListVehicleModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.VehicleModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.ListVehicleTaskModel:
    properties:
      data:
        items:
          $ref: '#/definitions/models.VehicleTaskModelResponse'
        type: array
      total:
        type: integer
    type: object
  models.OwnerModelResponse:
    properties:
      address:
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
        x-date: true
      email:
        type: string
        x-nullable: false
      id:
        type: string
      phone:
        type: string
        x-nullable: false
      photo:
        type: string
        x-nullable: false
      postal_code:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-date: true
    type: object
  models.PermissionModelResponse:
    properties:
      available:
        type: boolean
        x-nullable: false
      created_at:
        format: date-time
        type: string
        x-date: true
      id:
        type: string
      label:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-date: true
    type: object
  models.SparePartModelResponse:
    properties:
      barcode:
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
        x-date: true
      id:
        type: string
      reference:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-date: true
    type: object
  models.SupplierModelResponse:
    properties:
      created_at:
        format: date-time
        type: string
        x-date: true
      id:
        type: string
      name:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-date: true
    type: object
  models.TaskModelResponse:
    properties:
      created_at:
        format: date-time
        type: string
        x-date: true
      id:
        type: string
      label:
        type: string
        x-nullable: false
      parent_id:
        type: string
        x-nullable: true
      task:
        items:
          $ref: '#/definitions/models.TaskModelResponse'
        type: array
        x-nullable: false
      task_ids:
        items:
          type: string
        type: array
      updated_at:
        format: date-time
        type: string
        x-date: true
    type: object
  models.TotalCount:
    properties:
      count:
        type: integer
    type: object
  models.UpdateAccountModel:
    properties:
      email:
        type: string
        x-nullable: false
      name:
        type: string
        x-nullable: false
    type: object
  models.UpdateEmployeeModel:
    properties:
      name:
        type: string
        x-nullable: false
    type: object
  models.UpdateGarageModel:
    properties:
      label:
        type: string
        x-nullable: false
    type: object
  models.UpdateOwnerModel:
    properties:
      address:
        type: string
        x-nullable: false
      email:
        type: string
        x-nullable: false
      phone:
        type: string
        x-nullable: false
      photo:
        type: string
        x-nullable: false
      postal_code:
        type: string
        x-nullable: false
    type: object
  models.UpdatePermissionModel:
    properties:
      available:
        type: boolean
        x-nullable: false
      label:
        type: string
        x-nullable: false
    type: object
  models.UpdateSparePartModel:
    properties:
      barcode:
        type: string
        x-nullable: false
      reference:
        type: string
        x-nullable: false
    type: object
  models.UpdateSupplierModel:
    properties:
      name:
        type: string
        x-nullable: false
    type: object
  models.UpdateTaskModel:
    properties:
      label:
        type: string
        x-nullable: false
      parent_id:
        type: string
        x-nullable: false
    type: object
  models.UpdateVehicleModel:
    properties:
      chrono:
        type: string
        x-nullable: false
      collection_date:
        format: date-time
        type: string
        x-nullable: false
      commercial_name:
        type: string
        x-nullable: false
      delivery_date:
        format: date-time
        type: string
        x-nullable: false
      expertise:
        type: boolean
        x-nullable: false
      first_circulation:
        format: date-time
        type: string
        x-nullable: false
      mileage:
        type: integer
        x-nullable: false
      note:
        type: string
        x-nullable: false
      procedure_ve:
        type: boolean
        x-nullable: false
      registration:
        type: string
        x-nullable: false
      serial_number:
        type: string
        x-nullable: false
      sold_at:
        format: date-time
        type: string
        x-nullable: false
    type: object
  models.UpdateVehicleTaskModel:
    properties:
      deleted:
        type: boolean
        x-nullable: false
      finished_at:
        format: date-time
        type: string
        x-nullable: false
      started_at:
        format: date-time
        type: string
        x-nullable: false
    type: object
  models.VehicleModelResponse:
    properties:
      chrono:
        type: string
        x-nullable: false
      collection_date:
        format: date-time
        type: string
        x-date: true
        x-nullable: false
      commercial_name:
        type: string
        x-nullable: false
      created_at:
        format: date-time
        type: string
        x-date: true
      delivery_date:
        format: date-time
        type: string
        x-date: true
        x-nullable: false
      employee:
        allOf:
        - $ref: '#/definitions/models.EmployeeModelResponse'
        x-nullable: false
      employee_id:
        type: string
        x-nullable: false
      expertise:
        type: boolean
        x-nullable: false
      first_circulation:
        format: date-time
        type: string
        x-date: true
        x-nullable: false
      id:
        type: string
      mileage:
        type: integer
        x-nullable: false
      note:
        type: string
        x-nullable: false
      owner:
        allOf:
        - $ref: '#/definitions/models.OwnerModelResponse'
        x-nullable: false
      owner_id:
        type: string
        x-nullable: false
      procedure_ve:
        type: boolean
        x-nullable: false
      registration:
        type: string
        x-nullable: false
      serial_number:
        type: string
        x-nullable: false
      sold_at:
        format: date-time
        type: string
        x-date: true
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-date: true
      vehicle_task:
        items:
          $ref: '#/definitions/models.VehicleTaskModelResponse'
        type: array
        x-nullable: false
      vehicle_task_ids:
        items:
          type: string
        type: array
    type: object
  models.VehicleTaskModelResponse:
    properties:
      created_at:
        format: date-time
        type: string
        x-date: true
      deleted:
        type: boolean
        x-nullable: false
      employee:
        allOf:
        - $ref: '#/definitions/models.EmployeeModelResponse'
        x-nullable: false
      employee_id:
        type: string
        x-nullable: false
      finished_at:
        format: date-time
        type: string
        x-date: true
        x-nullable: false
      id:
        type: string
      started_at:
        format: date-time
        type: string
        x-date: true
        x-nullable: false
      task:
        allOf:
        - $ref: '#/definitions/models.TaskModelResponse'
        x-nullable: false
      task_id:
        type: string
        x-nullable: false
      updated_at:
        format: date-time
        type: string
        x-date: true
      vehicle:
        allOf:
        - $ref: '#/definitions/models.VehicleModelResponse'
        x-nullable: false
      vehicle_id:
        type: string
        x-nullable: false
    type: object
  utils.ResponseError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@mna-auto.io
    name: API Support
    url: http://www.mna-auto.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://mna-auto.io/terms/
  title: MNA-Automobile Swagger API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - root
  /api/account:
    post:
      consumes:
      - application/json
      description: Register account
      parameters:
      - description: Register account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.CreateAccountModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccountModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new account
      tags:
      - account
  /api/account/{id}:
    get:
      consumes:
      - application/json
      description: Get account by ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccountModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get account by ID
      tags:
      - account
    put:
      consumes:
      - application/json
      description: Edit account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      - description: Register account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.UpdateAccountModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccountModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a account
      tags:
      - account
  /api/account/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - account
  /api/account_import:
    post:
      consumes:
      - application/json
      description: Register account (useful for importing data)
      parameters:
      - description: Register account
        in: body
        name: account
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateAccountModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AccountModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many account
      tags:
      - account
  /api/account_list:
    get:
      consumes:
      - application/json
      description: List account
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListAccountModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List account
      tags:
      - account
  /api/employee:
    post:
      consumes:
      - application/json
      description: Register employee
      parameters:
      - description: Register employee
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.CreateEmployeeModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmployeeModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new employee
      tags:
      - employee
  /api/employee/{id}:
    get:
      consumes:
      - application/json
      description: Get employee by ID
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmployeeModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get employee by ID
      tags:
      - employee
    put:
      consumes:
      - application/json
      description: Edit employee
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Register employee
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEmployeeModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmployeeModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a employee
      tags:
      - employee
  /api/employee/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - employee
  /api/employee_import:
    post:
      consumes:
      - application/json
      description: Register employee (useful for importing data)
      parameters:
      - description: Register employee
        in: body
        name: employee
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateEmployeeModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EmployeeModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many employee
      tags:
      - employee
  /api/employee_list:
    get:
      consumes:
      - application/json
      description: List employee
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListEmployeeModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List employee
      tags:
      - employee
  /api/garage:
    post:
      consumes:
      - application/json
      description: Register garage
      parameters:
      - description: Register garage
        in: body
        name: garage
        required: true
        schema:
          $ref: '#/definitions/models.CreateGarageModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GarageModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new garage
      tags:
      - garage
  /api/garage/{id}:
    get:
      consumes:
      - application/json
      description: Get garage by ID
      parameters:
      - description: Garage ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GarageModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get garage by ID
      tags:
      - garage
    put:
      consumes:
      - application/json
      description: Edit garage
      parameters:
      - description: Garage ID
        in: path
        name: id
        required: true
        type: string
      - description: Register garage
        in: body
        name: garage
        required: true
        schema:
          $ref: '#/definitions/models.UpdateGarageModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GarageModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a garage
      tags:
      - garage
  /api/garage/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - garage
  /api/garage_import:
    post:
      consumes:
      - application/json
      description: Register garage (useful for importing data)
      parameters:
      - description: Register garage
        in: body
        name: garage
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateGarageModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GarageModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many garage
      tags:
      - garage
  /api/garage_list:
    get:
      consumes:
      - application/json
      description: List garage
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListGarageModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List garage
      tags:
      - garage
  /api/owner:
    post:
      consumes:
      - application/json
      description: Register owner
      parameters:
      - description: Register owner
        in: body
        name: owner
        required: true
        schema:
          $ref: '#/definitions/models.CreateOwnerModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OwnerModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new owner
      tags:
      - owner
  /api/owner/{id}:
    get:
      consumes:
      - application/json
      description: Get owner by ID
      parameters:
      - description: Owner ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OwnerModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get owner by ID
      tags:
      - owner
    put:
      consumes:
      - application/json
      description: Edit owner
      parameters:
      - description: Owner ID
        in: path
        name: id
        required: true
        type: string
      - description: Register owner
        in: body
        name: owner
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOwnerModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OwnerModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a owner
      tags:
      - owner
  /api/owner/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - owner
  /api/owner_import:
    post:
      consumes:
      - application/json
      description: Register owner (useful for importing data)
      parameters:
      - description: Register owner
        in: body
        name: owner
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateOwnerModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.OwnerModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many owner
      tags:
      - owner
  /api/owner_list:
    get:
      consumes:
      - application/json
      description: List owner
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListOwnerModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List owner
      tags:
      - owner
  /api/permission:
    post:
      consumes:
      - application/json
      description: Register permission
      parameters:
      - description: Register permission
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/models.CreatePermissionModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PermissionModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new permission
      tags:
      - permission
  /api/permission/{id}:
    get:
      consumes:
      - application/json
      description: Get permission by ID
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PermissionModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get permission by ID
      tags:
      - permission
    put:
      consumes:
      - application/json
      description: Edit permission
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      - description: Register permission
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePermissionModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PermissionModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a permission
      tags:
      - permission
  /api/permission/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - permission
  /api/permission_import:
    post:
      consumes:
      - application/json
      description: Register permission (useful for importing data)
      parameters:
      - description: Register permission
        in: body
        name: permission
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreatePermissionModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PermissionModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many permission
      tags:
      - permission
  /api/permission_list:
    get:
      consumes:
      - application/json
      description: List permission
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListPermissionModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List permission
      tags:
      - permission
  /api/spare_part:
    post:
      consumes:
      - application/json
      description: Register spare_part
      parameters:
      - description: Register spare_part
        in: body
        name: spare_part
        required: true
        schema:
          $ref: '#/definitions/models.CreateSparePartModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SparePartModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new spare_part
      tags:
      - spare_part
  /api/spare_part/{id}:
    get:
      consumes:
      - application/json
      description: Get spare_part by ID
      parameters:
      - description: SparePart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SparePartModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get spare_part by ID
      tags:
      - spare_part
    put:
      consumes:
      - application/json
      description: Edit spare_part
      parameters:
      - description: SparePart ID
        in: path
        name: id
        required: true
        type: string
      - description: Register spare_part
        in: body
        name: spare_part
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSparePartModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SparePartModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a spare_part
      tags:
      - spare_part
  /api/spare_part/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - spare_part
  /api/spare_part_import:
    post:
      consumes:
      - application/json
      description: Register spare_part (useful for importing data)
      parameters:
      - description: Register spare_part
        in: body
        name: spare_part
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateSparePartModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SparePartModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many spare_part
      tags:
      - spare_part
  /api/spare_part_list:
    get:
      consumes:
      - application/json
      description: List spare_part
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListSparePartModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List spare_part
      tags:
      - spare_part
  /api/supplier:
    post:
      consumes:
      - application/json
      description: Register supplier
      parameters:
      - description: Register supplier
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/models.CreateSupplierModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SupplierModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new supplier
      tags:
      - supplier
  /api/supplier/{id}:
    get:
      consumes:
      - application/json
      description: Get supplier by ID
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SupplierModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get supplier by ID
      tags:
      - supplier
    put:
      consumes:
      - application/json
      description: Edit supplier
      parameters:
      - description: Supplier ID
        in: path
        name: id
        required: true
        type: string
      - description: Register supplier
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSupplierModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SupplierModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a supplier
      tags:
      - supplier
  /api/supplier/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - supplier
  /api/supplier_import:
    post:
      consumes:
      - application/json
      description: Register supplier (useful for importing data)
      parameters:
      - description: Register supplier
        in: body
        name: supplier
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateSupplierModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SupplierModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many supplier
      tags:
      - supplier
  /api/supplier_list:
    get:
      consumes:
      - application/json
      description: List supplier
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListSupplierModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List supplier
      tags:
      - supplier
  /api/task:
    post:
      consumes:
      - application/json
      description: Register task
      parameters:
      - description: Register task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.CreateTaskModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new task
      tags:
      - task
  /api/task/{id}:
    get:
      consumes:
      - application/json
      description: Get task by ID
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: with task data
        in: query
        name: task
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get task by ID
      tags:
      - task
    put:
      consumes:
      - application/json
      description: Edit task
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      - description: Register task
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTaskModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a task
      tags:
      - task
  /api/task/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - task
  /api/task_import:
    post:
      consumes:
      - application/json
      description: Register task (useful for importing data)
      parameters:
      - description: Register task
        in: body
        name: task
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateTaskModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TaskModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many task
      tags:
      - task
  /api/task_list:
    get:
      consumes:
      - application/json
      description: List task
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with task data
        in: query
        name: task
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListTaskModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List task
      tags:
      - task
  /api/vehicle:
    post:
      consumes:
      - application/json
      description: Register vehicle
      parameters:
      - description: Register vehicle
        in: body
        name: vehicle
        required: true
        schema:
          $ref: '#/definitions/models.CreateVehicleModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VehicleModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new vehicle
      tags:
      - vehicle
  /api/vehicle/{id}:
    get:
      consumes:
      - application/json
      description: Get vehicle by ID
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: string
      - description: with owner data
        in: query
        name: owner
        type: boolean
      - description: with vehicle task data
        in: query
        name: vehicle_task
        type: boolean
      - description: with employee data
        in: query
        name: employee
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VehicleModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get vehicle by ID
      tags:
      - vehicle
    put:
      consumes:
      - application/json
      description: Edit vehicle
      parameters:
      - description: Vehicle ID
        in: path
        name: id
        required: true
        type: string
      - description: Register vehicle
        in: body
        name: vehicle
        required: true
        schema:
          $ref: '#/definitions/models.UpdateVehicleModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VehicleModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a vehicle
      tags:
      - vehicle
  /api/vehicle/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - vehicle
  /api/vehicle_import:
    post:
      consumes:
      - application/json
      description: Register vehicle (useful for importing data)
      parameters:
      - description: Register vehicle
        in: body
        name: vehicle
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateVehicleModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.VehicleModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many vehicle
      tags:
      - vehicle
  /api/vehicle_list:
    get:
      consumes:
      - application/json
      description: List vehicle
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with owner data
        in: query
        name: owner
        type: boolean
      - description: with vehicle task data
        in: query
        name: vehicle_task
        type: boolean
      - description: with employee data
        in: query
        name: employee
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListVehicleModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List vehicle
      tags:
      - vehicle
  /api/vehicle_task:
    post:
      consumes:
      - application/json
      description: Register vehicle_task
      parameters:
      - description: Register vehicle_task
        in: body
        name: vehicle_task
        required: true
        schema:
          $ref: '#/definitions/models.CreateVehicleTaskModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VehicleTaskModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create a new vehicle_task
      tags:
      - vehicle_task
  /api/vehicle_task/{id}:
    get:
      consumes:
      - application/json
      description: Get vehicle_task by ID
      parameters:
      - description: VehicleTask ID
        in: path
        name: id
        required: true
        type: string
      - description: with employee data
        in: query
        name: employee
        type: boolean
      - description: with task data
        in: query
        name: task
        type: boolean
      - description: with vehicle data
        in: query
        name: vehicle
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VehicleTaskModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Get vehicle_task by ID
      tags:
      - vehicle_task
    put:
      consumes:
      - application/json
      description: Edit vehicle_task
      parameters:
      - description: VehicleTask ID
        in: path
        name: id
        required: true
        type: string
      - description: Register vehicle_task
        in: body
        name: vehicle_task
        required: true
        schema:
          $ref: '#/definitions/models.UpdateVehicleTaskModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VehicleTaskModelResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Update a vehicle_task
      tags:
      - vehicle_task
  /api/vehicle_task/total:
    get:
      consumes:
      - application/json
      description: Total records
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TotalCount'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Total records
      tags:
      - vehicle_task
  /api/vehicle_task_import:
    post:
      consumes:
      - application/json
      description: Register vehicle_task (useful for importing data)
      parameters:
      - description: Register vehicle_task
        in: body
        name: vehicle_task
        required: true
        schema:
          items:
            $ref: '#/definitions/models.CreateVehicleTaskModel'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.VehicleTaskModelResponse'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: Create many vehicle_task
      tags:
      - vehicle_task
  /api/vehicle_task_list:
    get:
      consumes:
      - application/json
      description: List vehicle_task
      parameters:
      - description: page
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: per_page
        type: integer
      - description: sort field
        in: query
        name: sort_by
        type: string
      - description: order
        in: query
        name: descending
        type: boolean
      - description: with employee data
        in: query
        name: employee
        type: boolean
      - description: with task data
        in: query
        name: task
        type: boolean
      - description: with vehicle data
        in: query
        name: vehicle
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListVehicleTaskModel'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/utils.ResponseError'
      summary: List vehicle_task
      tags:
      - vehicle_task
  /api/vehicles_seed:
    post:
      consumes:
      - '*/*'
      description: Seed vehicles.
      parameters:
      - description: count
        in: query
        name: count
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Seed vehicles
      tags:
      - root
schemes:
- http
swagger: "2.0"
